// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "login",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "login",
                "parameters": [
                    {
                        "description": "login credentials",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginCredentialsDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register/student": {
            "post": {
                "description": "register student account",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "register student account",
                "parameters": [
                    {
                        "description": "student registration",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterStudentDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/dorm": {
            "get": {
                "description": "returns list of dorms filter by dorm type, zone,capacity, location, dorm and room facilities",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dorm"
                ],
                "summary": "get list of dorms",
                "parameters": [
                    {
                        "type": "integer",
                        "name": "capacity",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "name": "dorm_facilities",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "name": "lat",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "name": "long",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "lower_price",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "name": "room_facilities",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "upper_price",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "zone",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.DormDTO"
                            }
                        }
                    }
                }
            }
        },
        "/dorm/facility": {
            "get": {
                "description": "returns list of dorm facilities",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dorm"
                ],
                "summary": "get dorm facilities",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/dorm/suggest/{letter}": {
            "get": {
                "description": "returns list of dorm names from first letter",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dorm"
                ],
                "summary": "get dorm names from first letter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "First Letter",
                        "name": "letter",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.DormSuggestionDTO"
                            }
                        }
                    }
                }
            }
        },
        "/dorm/zone": {
            "get": {
                "description": "returns list of dorm zones",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dorm"
                ],
                "summary": "get dorm zones",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/dorm/{id}": {
            "get": {
                "description": "returns dorm details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dorm"
                ],
                "summary": "get dorm details from dorm id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Dorm ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Dorm"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/room/facility": {
            "get": {
                "description": "returns list of room facilities",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "room"
                ],
                "summary": "get room facilities",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.DormDTO": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "lat": {
                    "type": "number"
                },
                "long": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "picture": {
                    "type": "string"
                },
                "starting_price": {
                    "type": "integer"
                },
                "zone": {
                    "type": "string"
                }
            }
        },
        "dto.DormSuggestionDTO": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.LoginCredentialsDTO": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dto.RegisterStudentDTO": {
            "type": "object",
            "required": [
                "email",
                "faculty",
                "firstname",
                "gender",
                "lastname",
                "password",
                "student_id",
                "year_of_study"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "faculty": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "student_id": {
                    "type": "string"
                },
                "year_of_study": {
                    "type": "integer"
                }
            }
        },
        "model.AllDormFacility": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "model.AllRoomFacility": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "model.Dorm": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "dorm_owner": {
                    "$ref": "#/definitions/model.DormOwner"
                },
                "facilities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.AllDormFacility"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "lat": {
                    "type": "number"
                },
                "long": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "nearby_locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.NearbyLocation"
                    }
                },
                "pictures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.DormPicture"
                    }
                },
                "rooms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Room"
                    }
                },
                "rules": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "zone": {
                    "type": "string"
                }
            }
        },
        "model.DormOwner": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lastname": {
                    "type": "string"
                }
            }
        },
        "model.DormPicture": {
            "type": "object",
            "properties": {
                "picture_url": {
                    "type": "string"
                }
            }
        },
        "model.Location": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "lat": {
                    "type": "number"
                },
                "long": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.NearbyLocation": {
            "type": "object",
            "properties": {
                "distance": {
                    "type": "number"
                },
                "location": {
                    "$ref": "#/definitions/model.Location"
                }
            }
        },
        "model.Room": {
            "type": "object",
            "properties": {
                "available": {
                    "type": "boolean"
                },
                "capacity": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "facilities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.AllRoomFacility"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "pictures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.RoomPicture"
                    }
                },
                "price": {
                    "type": "integer"
                },
                "size": {
                    "type": "number"
                }
            }
        },
        "model.RoomPicture": {
            "type": "object",
            "properties": {
                "picture_url": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
